#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CellNetixApps.Source.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Rules")]
	public partial class RulesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRule(Rule instance);
    partial void UpdateRule(Rule instance);
    partial void DeleteRule(Rule instance);
    partial void InsertValue(Value instance);
    partial void UpdateValue(Value instance);
    partial void DeleteValue(Value instance);
    partial void InsertRule_Value(Rule_Value instance);
    partial void UpdateRule_Value(Rule_Value instance);
    partial void DeleteRule_Value(Rule_Value instance);
    partial void InsertValue_Type(Value_Type instance);
    partial void UpdateValue_Type(Value_Type instance);
    partial void DeleteValue_Type(Value_Type instance);
    #endregion
		
		public RulesDataContext() : 
				base(global::CellNetixApps.Properties.Settings.Default.RulesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RulesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RulesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RulesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RulesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Rule> Rules
		{
			get
			{
				return this.GetTable<Rule>();
			}
		}
		
		public System.Data.Linq.Table<Value> Values
		{
			get
			{
				return this.GetTable<Value>();
			}
		}
		
		public System.Data.Linq.Table<Rule_Value> Rule_Values
		{
			get
			{
				return this.GetTable<Rule_Value>();
			}
		}
		
		public System.Data.Linq.Table<Value_Type> Value_Types
		{
			get
			{
				return this.GetTable<Value_Type>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_Rules")]
		public ISingleResult<SP_RulesResult> SP_Rules([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Organization", DbType="NVarChar(15)")] string organization, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Facility", DbType="NVarChar(15)")] string facility, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Rev_Center", DbType="NVarChar(15)")] string rev_Center, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fee_Schedule", DbType="NVarChar(15)")] string fee_Schedule, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Specimen", DbType="NVarChar(255)")] string specimen, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Case_Type", DbType="NVarChar(255)")] string case_Type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RefMD", DbType="NVarChar(15)")] string refMD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), organization, facility, rev_Center, fee_Schedule, specimen, case_Type, refMD);
			return ((ISingleResult<SP_RulesResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rule]")]
	public partial class Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Organization;
		
		private string _Facility;
		
		private string _Rev_Center;
		
		private string _Fee_Schedule;
		
		private string _Specimen;
		
		private string _Case_Type;
		
		private string _RefMD;
		
		private EntitySet<Rule_Value> _Rule_Values;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnFacilityChanging(string value);
    partial void OnFacilityChanged();
    partial void OnRev_CenterChanging(string value);
    partial void OnRev_CenterChanged();
    partial void OnFee_ScheduleChanging(string value);
    partial void OnFee_ScheduleChanged();
    partial void OnSpecimenChanging(string value);
    partial void OnSpecimenChanged();
    partial void OnCase_TypeChanging(string value);
    partial void OnCase_TypeChanged();
    partial void OnRefMDChanging(string value);
    partial void OnRefMDChanged();
    #endregion
		
		public Rule()
		{
			this._Rule_Values = new EntitySet<Rule_Value>(new Action<Rule_Value>(this.attach_Rule_Values), new Action<Rule_Value>(this.detach_Rule_Values));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organization", DbType="NVarChar(15)")]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Facility", DbType="NVarChar(15)")]
		public string Facility
		{
			get
			{
				return this._Facility;
			}
			set
			{
				if ((this._Facility != value))
				{
					this.OnFacilityChanging(value);
					this.SendPropertyChanging();
					this._Facility = value;
					this.SendPropertyChanged("Facility");
					this.OnFacilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rev_Center", DbType="NVarChar(15)")]
		public string Rev_Center
		{
			get
			{
				return this._Rev_Center;
			}
			set
			{
				if ((this._Rev_Center != value))
				{
					this.OnRev_CenterChanging(value);
					this.SendPropertyChanging();
					this._Rev_Center = value;
					this.SendPropertyChanged("Rev_Center");
					this.OnRev_CenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee_Schedule", DbType="NVarChar(15)")]
		public string Fee_Schedule
		{
			get
			{
				return this._Fee_Schedule;
			}
			set
			{
				if ((this._Fee_Schedule != value))
				{
					this.OnFee_ScheduleChanging(value);
					this.SendPropertyChanging();
					this._Fee_Schedule = value;
					this.SendPropertyChanged("Fee_Schedule");
					this.OnFee_ScheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specimen", DbType="NVarChar(255)")]
		public string Specimen
		{
			get
			{
				return this._Specimen;
			}
			set
			{
				if ((this._Specimen != value))
				{
					this.OnSpecimenChanging(value);
					this.SendPropertyChanging();
					this._Specimen = value;
					this.SendPropertyChanged("Specimen");
					this.OnSpecimenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Case_Type", DbType="NVarChar(255)")]
		public string Case_Type
		{
			get
			{
				return this._Case_Type;
			}
			set
			{
				if ((this._Case_Type != value))
				{
					this.OnCase_TypeChanging(value);
					this.SendPropertyChanging();
					this._Case_Type = value;
					this.SendPropertyChanged("Case_Type");
					this.OnCase_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefMD", DbType="NVarChar(15)")]
		public string RefMD
		{
			get
			{
				return this._RefMD;
			}
			set
			{
				if ((this._RefMD != value))
				{
					this.OnRefMDChanging(value);
					this.SendPropertyChanging();
					this._RefMD = value;
					this.SendPropertyChanged("RefMD");
					this.OnRefMDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_Rule_Value", Storage="_Rule_Values", ThisKey="ID", OtherKey="Rule_ID")]
		public EntitySet<Rule_Value> Rule_Values
		{
			get
			{
				return this._Rule_Values;
			}
			set
			{
				this._Rule_Values.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rule_Values(Rule_Value entity)
		{
			this.SendPropertyChanging();
			entity.Rule = this;
		}
		
		private void detach_Rule_Values(Rule_Value entity)
		{
			this.SendPropertyChanging();
			entity.Rule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Values]")]
	public partial class Value : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Value_Type_ID;
		
		private string _Description;
		
		private EntitySet<Rule_Value> _Rule_Values;
		
		private EntityRef<Value_Type> _Value_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValue_Type_IDChanging(int value);
    partial void OnValue_Type_IDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Value()
		{
			this._Rule_Values = new EntitySet<Rule_Value>(new Action<Rule_Value>(this.attach_Rule_Values), new Action<Rule_Value>(this.detach_Rule_Values));
			this._Value_Type = default(EntityRef<Value_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value_Type_ID", DbType="Int NOT NULL")]
		public int Value_Type_ID
		{
			get
			{
				return this._Value_Type_ID;
			}
			set
			{
				if ((this._Value_Type_ID != value))
				{
					if (this._Value_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValue_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Value_Type_ID = value;
					this.SendPropertyChanged("Value_Type_ID");
					this.OnValue_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_Rule_Value", Storage="_Rule_Values", ThisKey="ID", OtherKey="Value_ID")]
		public EntitySet<Rule_Value> Rule_Values
		{
			get
			{
				return this._Rule_Values;
			}
			set
			{
				this._Rule_Values.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_Type_Value", Storage="_Value_Type", ThisKey="Value_Type_ID", OtherKey="ID", IsForeignKey=true)]
		public Value_Type Value_Type
		{
			get
			{
				return this._Value_Type.Entity;
			}
			set
			{
				Value_Type previousValue = this._Value_Type.Entity;
				if (((previousValue != value) 
							|| (this._Value_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Value_Type.Entity = null;
						previousValue.Values.Remove(this);
					}
					this._Value_Type.Entity = value;
					if ((value != null))
					{
						value.Values.Add(this);
						this._Value_Type_ID = value.ID;
					}
					else
					{
						this._Value_Type_ID = default(int);
					}
					this.SendPropertyChanged("Value_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rule_Values(Rule_Value entity)
		{
			this.SendPropertyChanging();
			entity.Value = this;
		}
		
		private void detach_Rule_Values(Rule_Value entity)
		{
			this.SendPropertyChanging();
			entity.Value = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rule_Values")]
	public partial class Rule_Value : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Value_ID;
		
		private int _Rule_ID;
		
		private EntityRef<Rule> _Rule;
		
		private EntityRef<Value> _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValue_IDChanging(int value);
    partial void OnValue_IDChanged();
    partial void OnRule_IDChanging(int value);
    partial void OnRule_IDChanged();
    #endregion
		
		public Rule_Value()
		{
			this._Rule = default(EntityRef<Rule>);
			this._Value = default(EntityRef<Value>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Value_ID
		{
			get
			{
				return this._Value_ID;
			}
			set
			{
				if ((this._Value_ID != value))
				{
					if (this._Value.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValue_IDChanging(value);
					this.SendPropertyChanging();
					this._Value_ID = value;
					this.SendPropertyChanged("Value_ID");
					this.OnValue_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rule_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Rule_ID
		{
			get
			{
				return this._Rule_ID;
			}
			set
			{
				if ((this._Rule_ID != value))
				{
					if (this._Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRule_IDChanging(value);
					this.SendPropertyChanging();
					this._Rule_ID = value;
					this.SendPropertyChanged("Rule_ID");
					this.OnRule_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_Rule_Value", Storage="_Rule", ThisKey="Rule_ID", OtherKey="ID", IsForeignKey=true)]
		public Rule Rule
		{
			get
			{
				return this._Rule.Entity;
			}
			set
			{
				Rule previousValue = this._Rule.Entity;
				if (((previousValue != value) 
							|| (this._Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rule.Entity = null;
						previousValue.Rule_Values.Remove(this);
					}
					this._Rule.Entity = value;
					if ((value != null))
					{
						value.Rule_Values.Add(this);
						this._Rule_ID = value.ID;
					}
					else
					{
						this._Rule_ID = default(int);
					}
					this.SendPropertyChanged("Rule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_Rule_Value", Storage="_Value", ThisKey="Value_ID", OtherKey="ID", IsForeignKey=true)]
		public Value Value
		{
			get
			{
				return this._Value.Entity;
			}
			set
			{
				Value previousValue = this._Value.Entity;
				if (((previousValue != value) 
							|| (this._Value.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Value.Entity = null;
						previousValue.Rule_Values.Remove(this);
					}
					this._Value.Entity = value;
					if ((value != null))
					{
						value.Rule_Values.Add(this);
						this._Value_ID = value.ID;
					}
					else
					{
						this._Value_ID = default(int);
					}
					this.SendPropertyChanged("Value");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Value_Types")]
	public partial class Value_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<Value> _Values;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Value_Type()
		{
			this._Values = new EntitySet<Value>(new Action<Value>(this.attach_Values), new Action<Value>(this.detach_Values));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_Type_Value", Storage="_Values", ThisKey="ID", OtherKey="Value_Type_ID")]
		public EntitySet<Value> Values
		{
			get
			{
				return this._Values;
			}
			set
			{
				this._Values.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Values(Value entity)
		{
			this.SendPropertyChanging();
			entity.Value_Type = this;
		}
		
		private void detach_Values(Value entity)
		{
			this.SendPropertyChanging();
			entity.Value_Type = null;
		}
	}
	
	public partial class SP_RulesResult
	{
		
		private int _rule_id;
		
		private int _value_id;
		
		private int _value_type_id;
		
		private string _value;
		
		private string _type;
		
		public SP_RulesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rule_id", DbType="Int NOT NULL")]
		public int rule_id
		{
			get
			{
				return this._rule_id;
			}
			set
			{
				if ((this._rule_id != value))
				{
					this._rule_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value_id", DbType="Int NOT NULL")]
		public int value_id
		{
			get
			{
				return this._value_id;
			}
			set
			{
				if ((this._value_id != value))
				{
					this._value_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value_type_id", DbType="Int NOT NULL")]
		public int value_type_id
		{
			get
			{
				return this._value_type_id;
			}
			set
			{
				if ((this._value_type_id != value))
				{
					this._value_type_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(255)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this._type = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
